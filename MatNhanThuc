using UnityEngine;
using UnityEngine.UI;

public class BossHub : MonoBehaviour
{
    [Header("UI Elements")]
    public Text targetHpText;
    public Text playerHpText;
    public Button autoAttackBtn;
    public Button autoHealBtn;
    public Button autoPickupBtn;
    public Button attackBossBtn;
    public Button teleBossBtn;

    [Header("References")]
    public Transform player;
    public Transform boss;

    [Header("Settings")]
    public float attackDistance = 10f;
    public float rotateSpeed = 60f; // độ xoay quanh boss
    public float attackCooldown = 1f;

    private bool autoAttack = false;
    private bool autoHeal = false;
    private bool autoPickup = false;
    private bool attackBoss = false;

    private float playerHp = 130f;
    private float playerHpMax = 130f;
    private float bossHp = 500f;
    private float bossHpMax = 500f;

    private float lastAttackTime = 0f;

    void Start()
    {
        autoAttackBtn.onClick.AddListener(() => Toggle(ref autoAttack, "Auto Đánh"));
        autoHealBtn.onClick.AddListener(() => Toggle(ref autoHeal, "Auto Băng Gạc"));
        autoPickupBtn.onClick.AddListener(() => Toggle(ref autoPickup, "Auto Lụm"));
        attackBossBtn.onClick.AddListener(() => Toggle(ref attackBoss, "Đánh Boss"));
        teleBossBtn.onClick.AddListener(TeleportToBoss);
    }

    void Update()
    {
        // Cập nhật UI thanh máu
        targetHpText.text = $"Máu mục tiêu: {bossHp}/{bossHpMax}";
        playerHpText.text = $"Máu bạn: {playerHp}/{playerHpMax}";

        if (attackBoss && boss != null)
        {
            AttackBossLogic();
        }

        if (autoAttack)
        {
            TryAttack();
        }

        if (autoHeal && playerHp < playerHpMax * 0.5f)
        {
            Heal();
        }

        if (autoPickup)
        {
            Pickup();
        }
    }

    // --- Các chức năng chính ---

    void AttackBossLogic()
    {
        float distance = Vector3.Distance(player.position, boss.position);

        if (distance > attackDistance)
        {
            // Di chuyển lại gần Boss
            player.position = Vector3.MoveTowards(player.position, boss.position, Time.deltaTime * 5f);
        }
        else
        {
            // Quay vòng quanh Boss
            player.RotateAround(boss.position, Vector3.up, rotateSpeed * Time.deltaTime);

            // Tự động đánh
            TryAttack();
        }
    }

    void TryAttack()
    {
        if (Time.time - lastAttackTime >= attackCooldown && bossHp > 0)
        {
            lastAttackTime = Time.time;
            float damage = 15f;
            bossHp = Mathf.Max(bossHp - damage, 0);
            Debug.Log($"Đánh Boss: -{damage} máu (Boss còn {bossHp})");
        }
    }

    void Heal()
    {
        float healAmount = 20f;
        playerHp = Mathf.Min(playerHp + healAmount, playerHpMax);
        Debug.Log($"Auto Băng Gạc: +{healAmount} máu (Bạn {playerHp}/{playerHpMax})");
    }

    void Pickup()
    {
        Collider[] items = Physics.OverlapSphere(player.position, 5f);
        foreach (Collider col in items)
        {
            if (col.CompareTag("Item"))
            {
                Destroy(col.gameObject); // Nhặt item
                Debug.Log("Auto Lụm: Đã nhặt 1 vật phẩm!");
            }
        }
    }

    void TeleportToBoss()
    {
        if (player != null && boss != null)
        {
            Vector3 newPos = boss.position + (Vector3.back * 3f);
            player.position = newPos;
            Debug.Log("Đã teleport đến Boss!");
        }
    }

    // --- Helper ---
    void Toggle(ref bool flag, string name)
    {
        flag = !flag;
        Debug.Log($"{name}: {(flag ? "BẬT" : "TẮT")}");
    }

    // --- Test input ---
    [ContextMenu("Test Gây sát thương")]
    void TakeDamage()
    {
        playerHp = Mathf.Max(playerHp - 20f, 0);
        Debug.Log($"Bạn bị trúng đòn! Máu còn: {playerHp}/{playerHpMax}");
    }
}
