local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ContextActionService = game:GetService("ContextActionService")

local player = Players.LocalPlayer
local character = player.Character
local hrp = nil
local humanoid = nil

local autoEnabled = true        -- master enable (phím P để toggle)
local spinWhenHolding = true    -- chỉ xoay khi cầm tool
local spinSpeedDegPerSec = 360  -- tốc độ quay (độ / giây)
local clickInterval = 0.12      -- khoảng thời gian giữa 2 click (giây)

local currentTool = nil
local clicking = false
local lastClick = 0

local function setupCharacter(char)
    character = char
    hrp = character:WaitForChild("HumanoidRootPart", 5)
    humanoid = character:FindFirstChildOfClass("Humanoid")
end

if not character then
    player.CharacterAdded:Wait()
    setupCharacter(player.Character)
else
    setupCharacter(character)
end

-- theo dõi thay đổi tool
local function onToolAdded(tool)
    if tool and tool:IsA("Tool") then
        currentTool = tool
    end
end

local function onToolRemoved(tool)
    if currentTool == tool then
        currentTool = nil
    end
end

local function refreshTools()
    -- tìm tool đang equip (nằm trong character) nếu có
    currentTool = nil
    for _, v in ipairs(character:GetChildren()) do
        if v:IsA("Tool") then
            currentTool = v
            break
        end
    end
end

-- kết nối sự kiện
character.ChildAdded:Connect(function(child)
    if child:IsA("Tool") then
        onToolAdded(child)
    end
end)
character.ChildRemoved:Connect(function(child)
    if child:IsA("Tool") then
        onToolRemoved(child)
    end
end)

player.CharacterAdded:Connect(function(char)
    setupCharacter(char)
    char.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then onToolAdded(child) end
    end)
    char.ChildRemoved:Connect(function(child)
        if child:IsA("Tool") then onToolRemoved(child) end
    end)
    refreshTools()
end)

-- Toggle bằng phím (P)
local TOGGLE_ACTION = "ToggleAutoSpin"
local function toggleAction(name, state, input)
    if state == Enum.UserInputState.Begin then
        autoEnabled = not autoEnabled
        -- thông báo nhanh
        local msg = autoEnabled and "AutoSpin Bật" or "AutoSpin Tắt"
        -- dùng HUD nhỏ (print) -- bạn có thể thay bằng GUI
        print(msg)
    end
end
ContextActionService:BindActionAtPriority(TOGGLE_ACTION, toggleAction, false, Enum.ContextActionPriority.Default.Value, Enum.KeyCode.P)

-- Hàm kích hoạt click lên tool (nếu tool có phương thức Activate)
local function tryClickTool(tool)
    if not tool then return end
    -- nhiều tool client có method :Activate()
    local ok, err = pcall(function()
        if tool and tool.Parent then
            if tool.Activate then
                tool:Activate()
            else
                -- nếu tool không expose Activate trên client, thử kích hoạt qua event "Remote" thường thấy (không đảm bảo)
                -- nothing here — tránh gọi remote game-specific
            end
        end
    end)
    if not ok then
        --  nếu lỗi thì in ra (dùng để debug)
        -- print("Click error:", err)
    end
end

-- Loop xoay và auto click (dùng RenderStepped để xoay mượt)
local lastTick = tick()
RunService.RenderStepped:Connect(function(dt)
    if not autoEnabled then return end
    if not character or not hrp then return end

    -- logic: nếu người chơi đang cầm tool (hoặc spinWhenHolding == false) thì quay
    local holding = currentTool ~= nil
    if spinWhenHolding and not holding then return end

    -- xoay nhẹ HRP quanh trục Y
    local angleDeg = spinSpeedDegPerSec * dt
    local cf = hrp.CFrame
    -- xoay quanh trục Y ở vị trí HRP
    hrp.CFrame = cf * CFrame.Angles(0, math.rad(angleDeg), 0)

    -- xử lý auto-click theo interval
    if holding and currentTool then
        local now = tick()
        if now - lastClick >= clickInterval then
            lastClick = now
            tryClickTool(currentTool)
        end
    end
end)

-- khởi tạo lần đầu
refreshTools()
